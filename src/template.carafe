<!DOCTYPE html>
<html lang='en'>

<head>
    <meta charset='utf-8' />

    <!--libraries-->
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@6.1.13/index.global.min.js'></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <!--bootstrap 5-->
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet'>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css' rel='stylesheet'>

    <style>
        :root {
            /*--font-size: 14px;*/
            --font-size: __fontSize__;
            /*--text-color: #212529;*/
            --text-color: __textColor__;
            /*--row-height: 28px;*/
            --row-height: __rowHeight__;

            --resource-padding: calc((var(--row-height) - var(--font-size)) / 4);
        }

        body {
            font-size: var(--font-size);
        }

        /* handles row height (because FullCalendar sucks and can't do this natively) */
        .fc-timeline-lane-frame {
            height: var(--row-height) !important;
        }

        .fc-timeline-event {
            height: var(--row-height) !important;
        }

        .fc-resource>.fc-datagrid-cell-frame {
            height: var(--row-height) !important;
        }

        .fc-resource>.fc-datagrid-cell-frame>.fc-datagrid-cell-cushion {
            padding: var(--resource-padding) !important;
        }

        /* handles height of header row (including dates)*/
        /*thead {
            height: 70px !important;
        }

        .fc-timeline-header-row {
            height: 70px !important;
        }*/

        /* handles time slot label (date) */
        .fc-timelime-slot-label {
            text-decoration: none !important;
        }

        .fc-scrollgrid-sync-table>col {
            text-align: center;
        }

        a {
            text-decoration: none !important;
            color: var(--text-color);
        }
    </style>

    <script>
        //globals
        var dayclicked = null;
        var clickstart = null;
        var calendar = null;
        var eventSource = null;
        var cacheEvent = null;

        document.addEventListener("DOMContentLoaded", function () {
            var calendarEl = document.getElementById("calendar");

            calendar = new FullCalendar.Calendar(calendarEl, {

                initialView: "resourceTimeline",
                height: window.innerHeight,
                contentHeight: "auto",
                eventStartEditable: true,
                eventDurationEditable: true,
                eventResourceEditable: true,
                eventOverlap: false,
                stickyHeaderDates: true,
                stickyFooterScrollbar: true,
                headerToolbar: false,
                weekends: true,
                displayEventTime: false,
                themeSystem: "bootstrap5",

                //dynamic properties
                duration: __duration__,
                initialDate: "__initialDate__",
                resources: prepareResources(__resources__),
                resourceOrder: "__resourceOrder__",
                resourceAreaWidth: "__resourceAreaWidth__",
                resourceGroupField: "__resourceGroupField__",
                schedulerLicenseKey: "__schedulerLicenseKey__",
                slotDuration: __slotDuration__,
                slotLabelFormat: __slotLabelFormat__,

                //chnages size of the calendar dynamically with the window
                windowResize: function () {
                    calendar.setOption('height', window.innerHeight);
                    setZoom(__slotWidthDays__);
                },

                //handles the movement of an event
                eventDrop: function (info) {
                    handleEventChange(info);
                },

                //handles the resiziing of an event
                eventResize: function (info) {
                    handleEventChange(info);
                },

                //handles the double-click of an event
                eventClick: function (info) {

                    var dayclickednew = new Date(info.el.fcSeg.start).getTime();
                    var d = new Date();
                    var clicktime = d.getTime();

                    if (dayclicked == dayclickednew && clicktime - clickstart < 500) {
                        clickstart = null;
                        dayclicked = null;

                        //capture resourceId (since these aren't included in the normal event object)
                        let resourceId = info.event._def.resourceIds[0];

                        //parse and then stringify info so that it looks how it will when FileMaker gets it
                        let params = JSON.parse(JSON.stringify(info.event));

                        //set the captured resourceId
                        params.resourceId = resourceId;

                        //clickEventToFileMakerUrl(params, "event", "FullCalendar: View Reservation");
                        clickEventToFileMakerUrl(params, "__viewScript__");
                    } else {
                        dayclicked = dayclickednew;
                        var d = new Date();
                        clickstart = d.getTime();
                    }

                    return false;
                },

                //handles the double-click of an empty date
                dateClick: function (info) {

                    var dayclickednew = new Date(info.date).getTime();
                    var d = new Date();
                    var clicktime = d.getTime();
                    if (dayclicked == dayclickednew && clicktime - clickstart < 500) {
                        clickstart = null;
                        dayclicked = null;

                        createReservation(info);
                    } else {
                        dayclicked = dayclickednew;
                        var d = new Date();
                        clickstart = d.getTime();
                    }
                },
            });

            calendar.render();

            //post-render actions:

            //adds initial events when calendar is initialized
            addEvents(__events__);

            //sets zoom level
            setZoom(__slotWidthDays__);
        });

        function clickEventToFileMakerUrl(params, script) {

            console.log(params);

            var theURL =
                "fmp://$/__filename__?script=" +
                script +
                "&param=" +
                encodeURIComponent(JSON.stringify(params, null, 2));

            window.location = theURL;
        }

        //checks if there is an event that exists on this resource for the given date
        function eventExists(date, resourceId) {

            let events = calendar.getEvents();

            //find an event object at the date passed with the same resourceId
            let eventObj = events.find(
                obj => {
                    if (FullCalendar.formatDate(obj.start) === FullCalendar.formatDate(date) &&
                        obj._def.resourceIds[0] === resourceId) {
                        return obj;
                    }
                }
            ) || null;

            return eventObj;
        }

        //is called when an event is moved or resized. assembles data to pass to FileMaker
        function handleEventChange(info) {

            cacheEvent = info;

            let params = JSON.parse(JSON.stringify(info));

            //clickEventToFileMakerUrl(params, "FullCalendar: Update Reservation");
            clickEventToFileMakerUrl(params, "__updateScript__");
        }

        //creates new event object and a subsequent Reservation record in FM DB
        //has validation to prevent an event from being added to a date that already has an event
        function createReservation(info) {

            //console.log(info);

            if (!eventExists(info.dateStr, info.resource.id)) {

                //calculate end date (next-day)
                let end = new Date(info.dateStr);
                end.setDate(end.getDate() + __reservationLength__ + 1);
                end = formatDateFC(FullCalendar.formatDate(end));

                let newEvent = {
                    color: "Gray",
                    title: "New Reservation",
                    start: info.dateStr,
                    end: end,
                    //end: info.dateStr,
                    resourceId: info.resource.id,
                    id: info.dateStr + info.resource.id,
                    editable: false,
                }

                //create new event on calendar
                let eventObj = calendar.addEvent(newEvent, eventSource);

                console.log(eventObj);

                //capture resourceId (since these aren't included in the normal event object)
                let resourceId = info.resource.id;

                //parse and then stringify info so that it looks how it will when FileMaker gets it
                let params = JSON.parse(JSON.stringify(eventObj));

                //set the captured resourceId
                params.resourceId = resourceId;

                //clickEventToFileMakerUrl(params, "FullCalendar: Create Reservation");
                clickEventToFileMakerUrl(params, "__createScript__");

                return event;
            }

            return null;
        }

        //processes DAPI Json object from FMP to work with event objects in FC
        function prepareEvents(json) {
            let data = json.response.data;
            let events = [];

            for (let event of data) {

                let event_data = {
                    //fullcalendar-specific props
                    "color": event.fieldData["Calendar Color"],
                    "title": event.fieldData["Display Guest"],
                    "start": formatDateFC(event.fieldData["Arrival Date"]),
                    "end": formatDateFC(event.fieldData["Departure Date"]),
                    "id": event.fieldData.ID,

                    //extended props
                    "resnum": event.fieldData["Reservation Number"],
                    "resourceId": event.fieldData.ID_Resource,
                    "seasonId": event.fieldData.ID_Season,
                    "status": event.fieldData.Status,
                }

                events.push(event_data);
            }

            return events;
        }

        //processes DAPI Json object from FMP to work with resource objects in FC
        function prepareResources(json) {

            let data = json.response.data;
            let resources = [];

            for (let resource of data) {

                let resource_data = {
                    //fullcalendar-specific props
                    "id": resource.fieldData.ID,
                    "title": resource.fieldData["Display Name"],

                    //extended props
                    "class": resource.fieldData["Resource Class"],
                    "type": resource.fieldData["Resource Type"],
                    //"rate": resource.fieldData[""],
                    "Sort": resource.fieldData.Sort,
                }

                resources.push(resource_data);
            }

            return resources;
        }

        //convert FileMaker date 'MM/DD/YYYY' to FullCalendar date 'YYYY-MM-DD'
        function formatDateFC(dateStr) {

            if (!dateStr)
                return dateStr;

            try {
                // Split the input date string by "/"
                const [month, day, year] = dateStr.split("/");

                // Pad the month and day with leading zeros if necessary
                const paddedMonth = (month.length === 1 ? '0' + month : month);
                const paddedDay = (day.length === 1 ? '0' + day : day);

                // Return the formatted date string in "yyyy-mm-dd" format
                return `${year}-${paddedMonth}-${paddedDay}`;

            } catch {
                console.error("Date '" + dateStr + "' is invalid and cannot be parsed by formatDateFC()");
                return null;
            }
        }

        //convert FullCalendar date 'YYYY-MM-DD' to FileMaker Date 'MM/DD/YYYY'
        function formatDateFM(dateStr) {

            if (!dateStr)
                return dateStr;

            try {
                // Split the input date string by "/"
                const [year, month, day] = dateStr.split("-");

                // Return the formatted date string in "yyyy-mm-dd" format
                return `${year}-${month}-${day}`;
            } catch {
                console.error("Date '" + dateStr + "' is invalid and cannot be parsed by formatDateFM()");
                return null;
            }
        }

        //Called by FMP

        //takes an event object from FileMaker, finds the associated event object, and updates it's contents
        // function updateEvent(event, id) {

        //     try {
        //         event = JSON.parse(event);

        //         console.log(event);

        //         //find calendar event by old_id and delete it from the calendar
        //         let eventObj = calendar.getEventById(id);

        //         //required & fullcalendar-specific props
        //         //if (event.start) {
        //         eventObj.setStart(formatDateFC(event.start));
        //         eventObj.setEnd(formatDateFC(event.end));
        //         //}
        //         eventObj.setResources([event.resourceId]);
        //         eventObj.setProp("title", event.title);
        //         eventObj.setProp("editable", true);
        //         eventObj.setProp("resourceEditable", true);
        //         eventObj.setProp("color", event.color);
        //         eventObj.setProp("id", event.id);

        //         //extended props
        //         eventObj.setProp("resnum", event.resnum);
        //         eventObj.setProp("status", event.status);

        //         calendar.render();

        //     } catch {
        //         console.error(`Unable to update event object ${eventObj}`);
        //         //call error capture script in FM?
        //     }
        // }

        //takes an event object from FileMaker, finds the associated event object, and updates it's contents
        function updateEvent(event, id) {

            try {
                event = JSON.parse(event);

                console.log(event);

                //find calendar event by old_id and delete it from the calendar
                let eventObj = calendar.getEventById(id);

                eventObj.remove();

                let newEvent = {
                    color: event.color,
                    title: event.title,
                    start: formatDateFC(event.start),
                    end: formatDateFC(event.end),
                    resourceId: event.resourceId,
                    id: event.id,
                    editable: true,
                    resnum: event.resnum,
                    status: event.status
                }

                //create new event on calendar
                eventObj = calendar.addEvent(newEvent, eventSource);

            } catch {
                console.error(`Unable to update event object ${eventObj}`);
                //call error capture script in FM?
            }
        }

        //reverts event object that was set in "cacheEvent" var to it's "old" details
        function revertLastEvent() {

            if (cacheEvent)
                cacheEvent.revert();

            calendar.render();
        }

        //adds new eventSource object to calendar from a passed Execute FileMaker Data API json object
        function addEvents(json) {
            preparedEvents = prepareEvents(json);
            eventSource = calendar.addEventSource(preparedEvents);
        }

        //takes a Execute FileMaker Data API response and replaces all of the event data currently on the calendar
        function refreshEvents(events) {

            events = JSON.parse(events);

            eventSource.refetch();

            eventSource.remove();
            addEvents(events);

            calendar.render();
        }

        //takes a FullCalendarDateFormat date and scrolls to that date on the calendar so that it is the left-most date displayed
        function scrollToDate(date) {

            // Get the "scroller" (no need to distinguish between header and content so get both)
            var scroller = $('.fc-scroller');

            // Get the destination date
            var selector = 'th[data-date="' + date + '"]';
            var newdate = $(selector).last()[0];

            // Scroll to date
            scroller.scrollLeft(newdate.offsetLeft);
        }

        function changeDateRange(start, duration) {

            calendar.gotoDate(start);
            calendar.setOption("duration", { days: parseInt(duration) });

            calendar.render();
        }

        //takes a number of days and sets the width of the date columns to fit the number specified in the view
        function setZoom(duration) {

            //get width of window and the width of the "Resources" column
            let width = window.innerWidth;
            let resourceEl = document.querySelector('.fc-datagrid-cell-frame');
            let resourceAreaWidth = parseInt(getComputedStyle(resourceEl).width);

            //subtract the width of the "Resource" column from the width of the window, then divide by number of days specified
            width -= resourceAreaWidth;
            width /= duration;

            let slotLabelFormat = {
                "day": "numeric",
                "month": "numeric",
                "omitCommas": true,
            };

            //remove weekday name from date text if longer than 15 days
            if (duration <= 15) {
                slotLabelFormat.weekday = "short";
            }

            //change contents of date column header
            calendar.setOption('slotLabelFormat', slotLabelFormat);

            //set size of date columns
            calendar.setOption('slotMinWidth', width);
        }

        function removeEvent(id) {
            let event = calendar.getEventById(id);
            event.remove();
        }

        function setEnd(id, end) {
            calendar.getEventById(id);


        }

        /*function scrollByInterval(currentDate, interval) {

            calendar.scrollToTime({ days: 14 });
        }*/

        /*function findLeftmostVisibleDate() {

    var container = document.querySelector('.fc-timeline-slots table');
    console.log(getComputedStyle(container).width);
    console.log(container.getBoundingClientRect());
    var dateElements = container.getAttribute(dataset.date);
    var closestDate = null;
    var minDistance = Infinity;

    dateElements.forEach(function (element) {
        var rect = element.getBoundingClientRect();
        var containerRect = container.getBoundingClientRect();
        var offsetLeft = rect.left - containerRect.left + scrollLeft;

        if (offsetLeft >= scrollLeft && offsetLeft < minDistance) {
            minDistance = offsetLeft;
            closestDate = element.getAttribute('data-date');
        }
    });

    console.log('Leftmost visible date:', closestDate);
}*/

    </script>
</head>

<body>
    <div id='calendar'></div>
    <!--<div>
        <button onclick="setZoom(7)">7 day</button>
        <button onclick="setZoom(15)">15 day</button>
        <button onclick="setZoom(30)">30 day</button>
        <button onclick="setZoom(100)">100 day</button>
    </div>-->
    <div>
        <button onclick="setEnd('19A7B0EB-C634-4916-A078-C86B5C050B50', '2024-06-07')">set end</button>
    </div>
</body>

</html>